#!/usr/bin/env python
import json
import os
import shutil
import tempfile
import urllib.request
import zipfile

from misc.utility.scons_hints import *

Import("env")
Import("env_modules")

def get_platform_lib():
    """Get the library file based on platform and architecture."""
    platform = env["platform"]
    arch = env["arch"]
    base_path = "#modules/rapier_3d/addons/godot-rapier3d/bin"
    
    if platform in ["macos", "osx"]:
        suffix = "arm64" if arch == "arm64" else "x86_64"
        return f"{base_path}/libgodot_rapier.macos.framework/libgodot_rapier.macos.{suffix}.a"
    
    elif platform == "ios":
        if arch not in ["arm64", "x86_64"]:
            raise Exception(f"Unsupported iOS architecture: {arch}")
        return f"{base_path}/libgodot_rapier.ios.{arch}.framework/libgodot_rapier.a"
    
    elif platform == "linuxbsd":
        arch_map = {"x86_64": "x86_64-unknown-linux-gnu", "arm64": "aarch64-unknown-linux-gnu", "arm32": "armv7-unknown-linux-gnueabihf"}
        if arch not in arch_map:
            raise Exception(f"Unsupported Linux architecture: {arch}")
        return f"{base_path}/libgodot_rapier.linux.{arch_map[arch]}.a"
    
    elif platform == "windows":
        arch_map = {"x86_64": "x86_64-pc-windows-msvc", "x86_32": "i686-pc-windows-msvc", "arm64": "aarch64-pc-windows-msvc"}
        if arch not in arch_map:
            raise Exception(f"Unsupported Windows architecture: {arch}")
        return f"{base_path}/libgodot_rapier.windows.{arch_map[arch]}.a"
    
    elif platform == "android":
        arch_map = {"arm64": "aarch64-linux-android", "arm32": "armv7-linux-androideabi", "x86_64": "x86_64-linux-android", "x86_32": "i686-linux-android"}
        if arch not in arch_map:
            raise Exception(f"Unsupported Android architecture: {arch}")
        return f"{base_path}/libgodot_rapier.android.{arch_map[arch]}.a"
    
    elif platform == "web":
        if arch != "wasm32":
            raise Exception(f"Unsupported Web architecture: {arch}")
        return f"{base_path}/libgodot_rapier.a"
    
    raise Exception(f"Unsupported platform: {platform}")

def download_and_extract_release():
    target_dir = os.path.join("addons", "godot-rapier3d")
    github_token = os.environ.get("GH_TOKEN")

    if os.path.isdir(target_dir):
        if not github_token:
            return
        shutil.rmtree(target_dir)

    release_url = "https://api.github.com/repos/appsinacup/godot-rapier-physics/releases/latest"
    asset_name = "static-rapier-3d-single-simd-parallel.zip"
    
    request = urllib.request.Request(release_url)
    if github_token:
        request.add_header("Authorization", f"token {github_token}")

    with urllib.request.urlopen(request) as response:
        release_data = json.loads(response.read().decode())

    download_url = next((a["browser_download_url"] for a in release_data.get("assets", []) if a.get("name") == asset_name), None)
    if not download_url:
        raise RuntimeError(f"Could not find '{asset_name}' in the latest release.")

    with tempfile.TemporaryDirectory() as tmp_dir:
        archive_path = os.path.join(tmp_dir, asset_name)
        urllib.request.urlretrieve(download_url, archive_path)

        with zipfile.ZipFile(archive_path, "r") as zip_ref:
            zip_ref.extractall(tmp_dir)

        extracted_addons_dir = next((os.path.join(root, "addons") for root, dirs, _ in os.walk(tmp_dir) if "addons" in dirs), None)
        if not extracted_addons_dir:
            raise RuntimeError("Release archive did not contain an 'addons' directory.")

        source_addon_dir = os.path.join(extracted_addons_dir, "godot-rapier3d")
        if not os.path.isdir(source_addon_dir):
            raise RuntimeError("Release archive missing 'addons/godot-rapier3d'.")

        shutil.copytree(source_addon_dir, target_dir)

try:
    download_and_extract_release()
except RuntimeError as e:
    print(f"Error: {e}")
    raise

lib_file = get_platform_lib()
env.Append(LIBS=[env.File(lib_file)])

env_rapier_3d = env_modules.Clone()
env_rapier_3d.add_source_files(env.modules_sources, "*.cpp")
